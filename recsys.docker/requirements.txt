# syntax=docker/dockerfile:1

# ==================================================================
# 定义可配置的构建参数
# ==================================================================
ARG CUDA_VERSION=12.1.1
ARG CUDNN_VERSION=8
ARG UBUNTU_VERSION=22.04


# ==================================================================
# Stage 1: Builder
# (此阶段保持不变)
# ==================================================================
FROM nvidia/cuda:${CUDA_VERSION}-cudnn${CUDNN_VERSION}-devel-ubuntu${UBUNTU_VERSION} AS builder

# --- 设置环境，避免交互式提示 ---
ENV DEBIAN_FRONTEND=noninteractive \
    TZ=Etc/UTC

# --- 添加 deadsnakes PPA 并安装所有 Python 版本和构建工具 ---
RUN apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    git curl build-essential cmake pkg-config \
    python3.8-venv python3.9-venv python3.10-venv python3.11-venv \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# --- 安装并配置 uv ---
RUN curl -LsSf https://astral.sh/uv/install.sh | sh
ENV PATH="/root/.local/bin:${PATH}"

# --- 为每个 Python 版本创建独立的虚拟环境 ---
RUN mkdir -p /opt/venvs && \
    python3.8 -m venv /opt/venvs/python3.8 && \
    python3.9 -m venv /opt/venvs/python3.9 && \
    python3.10 -m venv /opt/venvs/python3.10 && \
    python3.11 -m venv /opt/venvs/python3.11

# --- 仅为 Python 3.10 的虚拟环境安装完整的推荐系统工具包 ---
COPY requirements.txt .
RUN /opt/venvs/python3.10/bin/uv pip install --no-cache-dir -r requirements.txt


# ==================================================================
# Stage 2: Final Image
# (此阶段有重要更新)
# ==================================================================
FROM nvidia/cuda:${CUDA_VERSION}-cudnn${CUDNN_VERSION}-runtime-ubuntu${UBUNTU_VERSION}

# --- 设置环境 ---
ENV DEBIAN_FRONTEND=noninteractive TZ=Etc/UTC

# --- 添加 PPA 并安装所有 Python 运行时和增强的系统工具 (包括 openssh-server) ---
RUN apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common && \
    add-apt-repository ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    # SSH Server
    openssh-server \
    # Python Runtimes
    python3.8 python3.9 python3.10 python3.11 \
    # System tools (full suite)
    ca-certificates locales git curl wget iputils-ping net-tools dnsutils openssh-client \
    procps htop iotop lsof vim nano mc tree findutils \
    zip unzip p7zip-full sudo bash-completion man-db \
    && apt-get clean && \
    echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen && locale-gen en_US.UTF-8 && \
    rm -rf /var/lib/apt/lists/*

# --- 配置 SSH 服务 ---
RUN echo 'root:vscode' | chpasswd && \
    sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config && \
    mkdir /var/run/sshd

# --- 使用 update-alternatives 将 python3.10 设置为默认的 python3 ---
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 2 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 3 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 4

# --- 设置默认语言环境 ---
ENV LANG en_US.UTF-8
ENV LANGUAGE en_US:en
ENV LC_ALL en_US.UTF-8

# --- 从 builder 阶段拷贝所有虚拟环境和 uv ---
COPY --from=builder /opt/venvs /opt/venvs
COPY --from=builder /root/.local/bin/uv /usr/local/bin/uv

# --- 默认激活 Python 3.10 的虚拟环境 ---
ENV VIRTUAL_ENV=/opt/venvs/python3.10
ENV PATH="${VIRTUAL_ENV}/bin:${PATH}"

# --- 拷贝并设置启动脚本 ---
COPY start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

# --- 暴露端口 ---
EXPOSE 22 8888

# --- 设置工作目录 ---
WORKDIR /app

# --- 设置默认启动命令 ---
CMD ["/usr/local/bin/start.sh"]